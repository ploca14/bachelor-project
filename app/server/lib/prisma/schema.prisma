generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../kysely"
  fileName = "types.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @db.Uuid
  name           String
  email          String
  avatarUrl      String?
  collections    Collection[]
  conversations  Conversation[]
  files          File[]
  flashcardDecks FlashcardDeck[]
  SampleTest     SampleTest[]

  @@map("users")
}

model File {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  name              String
  originalName      String
  userId            String              @db.Uuid
  collections       CollectionFile[]
  conversations     ConversationFile[]
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  FlashcardDeckFile FlashcardDeckFile[]
  SampleTestFile    SampleTestFile[]

  @@map("files")
}

model Documents {
  id        BigInt                 @id @default(autoincrement()) @db.BigInt
  content   String?
  metadata  Json?
  embedding Unsupported("vector")?

  @@map("documents")
}

model Collection {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  userId    String           @db.Uuid
  name      String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     CollectionFile[]

  @@map("collections")
}

model CollectionFile {
  collectionId String     @db.Uuid
  fileId       String     @db.Uuid
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  file         File       @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([collectionId, fileId])
  @@map("collections_files")
}

model Conversation {
  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime           @default(now()) @db.Timestamptz(6)
  userId    String             @db.Uuid
  name      String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     ConversationFile[]
  messages  Message[]

  @@map("conversations")
}

model ConversationFile {
  conversationId String       @db.Uuid
  fileId         String       @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  file           File         @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([conversationId, fileId])
  @@map("conversations_files")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  conversationId String       @db.Uuid
  content        String
  role           MessageRole
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum MessageRole {
  human
  ai

  @@map("message_role")
}

enum GenerationStatus {
  pending
  complete
  error

  @@map("generation_status")
}

model FlashcardDeck {
  id         String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime            @default(now()) @db.Timestamptz(6)
  userId     String              @db.Uuid
  name       String
  status     GenerationStatus    @default(complete)
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcards Flashcard[]
  files      FlashcardDeckFile[]

  @@map("flashcard_decks")
}

model Flashcard {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  deckId    String        @db.Uuid
  front     String
  back      String
  deck      FlashcardDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@map("flashcards")
}

model FlashcardDeckFile {
  deckId String        @db.Uuid
  fileId String        @db.Uuid
  deck   FlashcardDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)
  file   File          @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([deckId, fileId])
  @@map("flashcard_decks_files")
}

model SampleTest {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  userId    String           @db.Uuid
  name      String
  status    GenerationStatus @default(complete)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]
  files     SampleTestFile[]

  @@map("sample_tests")
}

model Question {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  testId    String     @db.Uuid
  content   String
  test      SampleTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model SampleTestFile {
  testId String     @db.Uuid
  fileId String     @db.Uuid
  test   SampleTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  file   File       @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([testId, fileId])
  @@map("sample_tests_files")
}
